<?xml version="1.0" encoding="UTF-8"?>
<includes>
	<include name="BasicForecast">
		<control type="group">
			<visible>Skin.HasSetting(Enable.BasicWeatherView)</visible>
			<include>Animation.Common</include>
			<control type="group">
				<top>200</top>
				<left>85</left>
				<control type="group">
					<width>1750</width>
					<height>390</height>
					<include>ThumbnailItemBackground</include>
					<control type="image">
						<top>20</top>
						<left>20</left>
						<right>20</right>
						<height>310</height>
						<texture border="5">overlays/diffuse-overlay.png</texture>
 						<visible>Skin.HasSetting(Enable.HighlightFocused)</visible>
					</control>
                    <control type="grouplist">
                        <left>20</left>
                        <right>20</right>
                        <top>327</top>
                        <height>50</height>
                        <orientation>horizontal</orientation>
                        <control type="label">
                            <width>auto</width>
                            <font>font13</font>
                            <label>$LOCALIZE[31204]</label>
						<selectedcolor>SelectedColor</selectedcolor>
                        </control>
                        <control type="label">
                            <width>auto</width>
                            <font>font13</font>
                            <label> $LOCALIZE[19107] </label>
                            <visible>!String.IsEmpty(Window(weather).Property(Location))</visible>
						<selectedcolor>SelectedColor</selectedcolor>
                        </control>
                        <control type="label">
                            <width>auto</width>
                            <font>font13</font>
                            <label>$INFO[Window(weather).Property(Location)]</label>
						<selectedcolor>SelectedColor</selectedcolor>
                        </control>
                    </control>


					<!-- display either remote image, or local image depending on setting -->
					<control type="image">
						<visible>Skin.HasSetting(Enable.RemoteWeatherIcons)</visible>
						<left>40</left>
						<top>40</top>
						<height>270</height>
						<aspectratio scalediffuse="false" align="left" aligny="center">keep</aspectratio>
						<texture background="true">$INFO[Window(weather).Property(Current.RemoteIcon)]</texture>
					</control>
					<control type="image">
						<visible>!Skin.HasSetting(Enable.RemoteWeatherIcons)</visible>
						<left>40</left>
						<top>40</top>
						<height>270</height>
						<aspectratio scalediffuse="false" align="left" aligny="center">keep</aspectratio>
						<texture background="true">$VAR[WeatherIconVar]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
					</control>
			
					<control type="grouplist">
						<top>0</top>
						<left>350</left>
						<orientation>horizontal</orientation>
						<control type="label">
							<description>current temp Value</description>
							<width>auto</width>
							<height>270</height>
							<font>WeatherTemp</font>
							<label>$INFO[Window(weather).Property(Current.Temperature)]</label>
						</control>
						<control type="label">
							<description>current temp Value Units</description>
							<left>270</left>
							<width>auto</width>
							<height>216</height>
							<font>font16</font>
							<label>$INFO[System.TemperatureUnits]</label>
						</control>
					</control>
					<control type="label">
						<description>current condition label</description>
						<top>210</top>
						<left>350</left>
						<width>800</width>
						<height>60</height>
						<label>$INFO[Window(weather).Property(Current.Condition)], $LOCALIZE[402] $INFO[Window(weather).Property(Current.FeelsLike)]$INFO[System.TemperatureUnits]</label>
						<font>font30</font>
					</control>
					<control type="grouplist">
						<left>1250</left>
						<top>60</top>
						<width>438</width>
						<itemgap>20</itemgap>
						<control type="label">
							<label>[COLOR=LabelTextColor]$LOCALIZE[406]: [/COLOR]$INFO[Window(weather).Property(Current.Humidity)]</label>
							<width>438</width>
							<height>40</height>
							<align>right</align>
							<font>font14</font>
							<visible>!String.IsEmpty(Window(weather).Property(Current.Humidity))</visible>
						</control>
						<control type="label">
							<label>[COLOR=LabelTextColor]$LOCALIZE[404]:[/COLOR] $INFO[Window(weather).Property(Current.Wind)]</label>
							<width>438</width>
							<height>40</height>
							<align>right</align>
							<font>font14</font>
     						<visible>!String.IsEmpty(Window(weather).Property(Current.Wind))</visible>
						</control>
						<control type="label">
							<label>[COLOR=LabelTextColor]$LOCALIZE[33027]:[/COLOR] [LOWERCASE]$INFO[Window(weather).Property(Today.Sunrise)][/LOWERCASE]</label>
							<width>438</width>
							<height>40</height>
							<align>right</align>
							<font>font14</font>
							<visible>!String.IsEmpty(Window(weather).Property(Today.Sunrise))</visible>
						</control>
						<control type="label">
							<label>[COLOR=LabelTextColor]$LOCALIZE[33028]:[/COLOR] [LOWERCASE]$INFO[Window(weather).Property(Today.Sunset)][/LOWERCASE]</label>
							<width>438</width>
							<height>40</height>
							<align>right</align>
							<font>font14</font>
							<visible>!String.IsEmpty(Window(weather).Property(Today.Sunset))</visible>
						</control>
					</control>
				</control>
				<control type="image">
					<visible>Control.HasFocus(305) + !Container(305).IsUpdating</visible>
					<animation effect="fade" time="320" delay="200">Visible</animation>
					<animation effect="fade" time="200">Hidden</animation>
					<left>10</left>
					<top>400</top>
					<width>330</width>
					<height>370</height>
					<include>FocusedBackgroundFade</include>
					<texture colordiffuse="FocusColor" border="5">listselect_fo.png</texture>
					<animation effect="slide" end="350,0" time="300" tween="cubic" easing="inout" condition="Integer.IsGreater(Container(305).Column,3)">Conditional</animation>
					<animation effect="slide" end="350,0" time="300" tween="cubic" easing="inout" condition="Integer.IsGreater(Container(305).Column,2)">Conditional</animation>
					<animation effect="slide" end="350,0" time="300" tween="cubic" easing="inout" condition="Integer.IsGreater(Container(305).Column,1)">Conditional</animation>
					<animation effect="slide" end="350,0" time="300" tween="cubic" easing="inout" condition="Integer.IsGreater(Container(305).Column,0)">Conditional</animation>
				</control>
 

			<control type="panel" id="305">
					<top>390</top>
					<left>0</left>
					<width>1750</width>
					<height>390</height>
					<onleft>9000</onleft>
					<onright>305</onright>
					<onback>9000</onback>
					<onup>9000</onup>
					<ondown>9000</ondown>
					<preloaditems>2</preloaditems>
					<viewtype label="21371">list</viewtype>
					<scrolltime tween="quadratic" easing="out">300</scrolltime>
					<orientation>horizontal</orientation>
					<itemlayout height="390" width="350">
						<include>ThumbnailItemBackground</include>
						<control type="label">
							<left>20</left>
							<right>20</right>
							<top>327</top>
							<height>50</height>
							<label>$INFO[ListItem.Label]</label>
							<selectedcolor>SelectedColor</selectedcolor>
						</control>
						<control type="image">
							<left>75</left>
							<top>72</top>
							<right>75</right>
							<height>200</height>
							<aspectratio scalediffuse="false" align="center" aligny="center">keep</aspectratio>
							<texture background="true" fallback="DefaultFolder.png">$INFO[ListItem.Icon]</texture>
						</control>
						<control type="label">
							<top>30</top>
							<left>20</left>
							<width>310</width>
							<height>60</height>
							<font>font15</font>
							<align>center</align>
							<selectedcolor>SelectedColor</selectedcolor>
							<label>$INFO[ListItem.Label2]</label>
						</control>
						<control type="label">
							<top>250</top>
							<left>20</left>
							<width>310</width>
							<height>60</height>
							<font>font15</font>
							<align>center</align>
							<selectedcolor>SelectedColor</selectedcolor>
							<label>$INFO[ListItem.Property(HighTemp),[COLOR=HighTemp],[/COLOR]]$INFO[ListItem.Property(LowTemp), | [COLOR=LowTemp],[/COLOR]]</label>
						</control>
						<control type="image">
							<top>20</top>
							<left>20</left>
							<right>20</right>
							<height>310</height>
							<texture border="5">overlays/diffuse-overlay.png</texture>
 						<visible>Skin.HasSetting(Enable.HighlightFocused)</visible>
						</control>
					</itemlayout>

					<focusedlayout height="390" width="350">
						<include>ThumbnailItemBackground</include>
						<control type="label">
							<left>20</left>
							<right>20</right>
							<top>327</top>
							<height>50</height>
							<label>$INFO[ListItem.Label]</label>
						</control>
						<control type="image">
							<left>75</left>
							<top>72</top>
							<right>75</right>
							<height>200</height>
							<aspectratio scalediffuse="false" align="center" aligny="center">keep</aspectratio>
							<texture background="true" fallback="DefaultFolder.png">$INFO[ListItem.Icon]</texture>
						</control>
						<control type="label">
							<top>30</top>
							<left>20</left>
							<width>310</width>
							<height>60</height>
							<font>font15</font>
							<align>center</align>
							<selectedcolor>SelectedColor</selectedcolor>
							<label>$INFO[ListItem.Label2]</label>
						</control>
						<control type="label">
							<top>250</top>
							<left>20</left>
							<width>310</width>
							<height>60</height>
							<font>font15</font>
							<align>center</align>
							<selectedcolor>SelectedColor</selectedcolor>
							<label>$INFO[ListItem.Property(HighTemp),[COLOR=HighTemp],[/COLOR]]$INFO[ListItem.Property(LowTemp), [COLOR=LowTemp],[/COLOR]]</label>
						</control>
						<control type="image">
							<animation center="auto" condition="Control.HasFocus(305)" easing="inout" effect="fade" end="0" start="100" time="300" tween="sine">Focus</animation>
							<animation center="auto" condition="Control.HasFocus(305)" easing="inout" effect="fade" end="100" start="0" time="300" tween="sine">UnFocus</animation>
							<top>20</top>
							<left>20</left>
							<right>20</right>
							<height>310</height>
							<texture border="5">overlays/diffuse-overlay.png</texture>
 						<visible>Skin.HasSetting(Enable.HighlightFocused)</visible>
						</control>
					</focusedlayout>
					
				<content>
					<!-- try to get Daily info, but if that is not available, fetch Day 
						info as a backup -->
					<item>
						<label>$LOCALIZE[31909]</label>
						<icon />
						<visible>String.IsEmpty(Window.Property(Daily.IsFetched))</visible>
					</item>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="1" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="2" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="3" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="4" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="5" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="6" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="7" />
					</include>
					<include content="weather-daily-item"
						condition="!String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="8" />
					</include>


					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="0" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
							<param name="index" value="1" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="2" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="3" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="4" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="5" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="6" />
					</include>
					<include content="weather-day-item"
						condition="String.IsEmpty(Window.Property(Daily.IsFetched))">
						<param name="index" value="7" />
					</include>

				</content>
			</control>
		</control>
		
		<control type="image">
			<left>1240</left>
			<top>785</top>
			<width>500</width>
			<height>50</height>
			<aspectratio align="right" aligny="center">keep</aspectratio>
			<texture background="true" colordiffuse="33ffffff">$INFO[Window.Property(WeatherProviderLogo)]</texture>
		</control>
		<control type="button" id="9000">
			<include>HiddenObject</include>
			<onleft condition="!Skin.HasSetting(KioskMode.Enabled)">SetProperty(MediaMenu,True,home)</onleft>
			<onleft condition="!Skin.HasSetting(KioskMode.Enabled)">SetFocus(9050)</onleft>
		</control>
	</control>
 
	</include>
</includes>
